#******* Format to access Input Parameters *******
# To use variable, prefix with '$'. eg. $message
# Read more https://docs.servicenow.com/?context=CSHelp:IntegrationHub-PowerShell-Step

#******* Reserved variables available when remoting type is Run on MID
# $computer   Host IP resolved from Connection alias
# $cred       Credential Object. Credential resolved via connection alias or credential alias. This can be used in conjunction with any cmd-let which support credential parameter eg. New-PSSession -credential $cred
# $log_info   mid property "mid.property.powershell.log_info" set on instance to enable debugging. So it's a flag available to act on and add any verbose logging if they want to in their script
##########################################################################################################################################
#### 
#### Script:      DL_deletion.ps1                                      
#### Author:      Balázs von Bölcsházy                                            
#### Version:     1.0                                                         
#### Description: Deletes an Existing DL
#### Approver:    
####
#### Changes:     
####
###########################################################################################################################################

# Import ExchangeOnline module
Import-Module ExchangeOnlineManagement

# Exchange connection details
##$AppId = "931761a8-e5a2-46c6-b602-f201b9d97e06"
##$CertificateThumbprint = "B30DF9531B799A43AD24A579969A58C8B7A2FEC8"
##$Organization = "ccuatlab.com"

try {
    # Connect to Exchange Online
    Connect-ExchangeOnline -CertificateThumbPrint $CertificateThumbprint -AppID $AppId -Organization $Organization

    # Check if the Distribution List exists
    $existingDL = Get-DistributionGroup -Identity $PrimarySmtpAddress -ErrorAction SilentlyContinue

    if (-not $existingDL) {
        $result = @{
            ErrorMessage = "Distribution List '$PrimarySmtpAddress' not found. No action taken."
            Status = 2
        }
        Write-Output ($result | ConvertTo-Json -Compress)
        exit
    }
    
    # Try to delete the DL

    Remove-DistributionGroup -Identity $PrimarySmtpAddress -Confirm:$false -ErrorAction Stop
    
    # Final result object
    $result = @{
        ErrorMessage = ''
        Status = 0
    }

    # Output the result as JSON
    Write-Output ($result | ConvertTo-Json -Compress)

} catch {
    
    # Final result object
    $result = @{
        ErrorMessage = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Error deleting '$PrimarySmtpAddress': $($_.Exception.Message)"
        Status = 1
    }

    # Output the result as JSON
    Write-Output ($result | ConvertTo-Json -Compress)
}


